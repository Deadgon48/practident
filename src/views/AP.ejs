<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #3498db;
            --primary-dark: #2980b9;
            --error-color: #e74c3c;
            --success-color: #2ecc71;
            --warning-color: #f1c40f;
            --background-color: #f5f5f5;
            --text-color: #2c3e50;
            --border-color: #ddd;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: var(--background-color);
            min-height: 100vh;
        }

        .container {
            max-width: 800px;
            margin: 0 auto;
            background: white;
            padding: 30px;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }

        .header {
            text-align: center;
            margin-bottom: 30px;
        }

        .logo {
            width: 80px;
            height: 80px;
            margin: 0 auto 15px;
            display: flex;
            align-items: center;
            justify-content: center;
            background-color: var(--primary-color);
            border-radius: 50%;
            color: white;
            font-size: 40px;
            font-weight: bold;
            transition: transform 0.3s ease;
        }

        .logo:hover {
            transform: scale(1.05);
        }

        .brand {
            color: var(--primary-color);
            font-size: 32px;
            font-weight: bold;
            margin-bottom: 10px;
        }

        .divider {
            height: 2px;
            background: linear-gradient(to right, var(--primary-color), var(--primary-dark));
            margin: 15px 0;
            border-radius: 2px;
        }

        .especialidad-info {
            background-color: #e3f2fd;
            padding: 15px;
            margin: 15px 0;
            border-radius: 8px;
            font-weight: 500;
            color: #1976d2;
            text-align: center;
            animation: fadeIn 0.3s ease;
        }

        .section-title {
            font-size: 1.2rem;
            color: var(--primary-color);
            margin: 25px 0 15px;
            padding-bottom: 8px;
            border-bottom: 2px solid var(--primary-color);
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .form-group {
            margin-bottom: 20px;
            position: relative;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            color: var(--text-color);
            font-weight: 500;
        }

        .form-group input,
        .form-group select,
        .form-group textarea {
            width: 100%;
            padding: 12px;
            border: 2px solid var(--border-color);
            border-radius: 8px;
            font-size: 16px;
            transition: all 0.3s ease;
            box-sizing: border-box;
        }

        .form-group input:focus,
        .form-group select:focus,
        .form-group textarea:focus {
            border-color: var(--primary-color);
            outline: none;
            box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.2);
        }

        .form-group textarea {
            min-height: 120px;
            resize: vertical;
        }

        .form-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }

        .help-text {
            font-size: 12px;
            color: #666;
            margin-top: 4px;
        }

        .error-message {
            color: var(--error-color);
            font-size: 14px;
            padding: 8px;
            background-color: rgba(231, 76, 60, 0.1);
            border-radius: 4px;
            display: none;
            margin-top: 5px;
        }

        .confirmation {
            background-color: rgba(46, 204, 113, 0.1);
            padding: 20px;
            border-radius: 8px;
            margin: 20px 0;
            display: none;
            animation: slideIn 0.3s ease;
        }

        .confirmation strong {
            color: var(--success-color);
            display: block;
            margin-bottom: 10px;
        }

        .confirmation ul {
            list-style: none;
            padding: 0;
            margin: 0;
        }

        .confirmation li {
            margin: 8px 0;
            color: var(--text-color);
        }

        .historial {
            margin-top: 30px;
            background-color: #f8f9fa;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        }

        .historial h3 {
            color: var(--text-color);
            margin-top: 0;
            margin-bottom: 15px;
            font-size: 1.2rem;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .practica-item {
            background: white;
            padding: 15px;
            margin: 10px 0;
            border-radius: 8px;
            border: 1px solid var(--border-color);
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }

        .practica-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }

        .practica-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
            color: var(--text-color);
            font-weight: 500;
        }

        .practica-detalles {
            display: flex;
            justify-content: space-between;
            font-size: 0.9em;
            color: #666;
        }

        .estado-badge {
            padding: 4px 12px;
            border-radius: 12px;
            font-size: 0.85em;
            font-weight: 500;
        }

        .button-container {
    display: flex;
    justify-content: space-between; /* Asegura que los botones estén separados equitativamente */
    gap: 20px; /* Espacio entre botones */
    margin-top: 30px;
}

.button {
    flex: 1; /* Ambos botones ocuparán el mismo ancho */
    padding: 14px 0; /* Ajusta el tamaño vertical */
    border: none;
    border-radius: 8px;
    font-size: 16px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
    text-align: center;
    text-decoration: none;
    color: white;
}

.button-primary {
    background-color: var(--primary-color);
}

.button-primary:hover {
    background-color: var(--primary-dark);
}

.button-secondary {
    background-color: #95a5a6;
}

.button-secondary:hover {
    background-color: #7f8c8d;
}

        .descripcion-adicional {
            background-color: #f8f9fa;
            padding: 10px;
            margin-top: 5px;
            border-radius: 4px;
            font-size: 0.9em;
            display: none;
            animation: fadeIn 0.3s ease;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        @keyframes slideIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        @media (max-width: 768px) {
            .container {
                padding: 20px;
            }

            .form-grid {
                grid-template-columns: 1fr;
            }

            .button {
                padding: 12px 24px;
            }
        }

        .loading {
            position: relative;
            pointer-events: none;
        }

        .loading::after {
            content: '';
            position: absolute;
            width: 20px;
            height: 20px;
            top: 50%;
            left: 50%;
            margin: -10px 0 0 -10px;
            border: 3px solid rgba(255,255,255,0.3);
            border-top-color: white;
            border-radius: 50%;
            animation: spin 0.8s linear infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <div class="logo">PD</div>
            <div class="brand">PracticDent</div>
            <div class="divider"></div>
            <h1>Asignar Práctica</h1>
            <div id="especialidadActual"></div>
        </div>

        <div id="errorMessage" class="error-message"></div>

        <form id="practicaForm" onsubmit="guardarPractica(event)">
            <!-- Información básica -->
            <div class="section-title">
                <i class="fas fa-info-circle"></i>
                <span>Información Básica</span>
            </div>

            <div class="form-group">
                <label for="practiceID">ID de Práctica:</label>
                <input type="text" id="practiceID" 
                       placeholder="ID generado automáticamente" readonly/>
                <div class="help-text">Se generará automáticamente al guardar</div>
            </div>

            <div class="form-grid">
                <div class="form-group">
                    <label for="materia">Materia:</label>
                    <select id="materia" required>
                        <option value="">Seleccione la materia</option>
                    </select>
                    <div id="descripcionMateria" class="descripcion-adicional"></div>
                </div>

                <div class="form-group">
                    <label for="tipoPractica">Tipo de Práctica:</label>
                    <select id="tipoPractica" required>
                        <option value="">Seleccione tipo de práctica</option>
                    </select>
                    <div id="infoPractica" class="descripcion-adicional"></div>
                </div>
            </div>

            <!-- Fechas y Grupo -->
            <div class="section-title">
                <i class="fas fa-calendar-alt"></i>
                <span>Fechas y Grupo</span>
            </div>

            <div class="form-grid">
                <div class="form-group">
                    <label for="fechaInicio">Fecha de Inicio:</label>
                    <input type="date" id="fechaInicio" required/>
                    <div class="help-text">Fecha de inicio de la práctica</div>
                </div>

                <div class="form-group">
                    <label for="fechaFin">Fecha de Fin:</label>
                    <input type="date" id="fechaFin" required/>
                    <div class="help-text">Fecha límite de la práctica</div>
                </div>
            </div>

            <div id="mensajeFechas" class="error-message"></div>

            <div class="form-grid">
                <div class="form-group">
                    <label for="grupo">Grupo:</label>
                    <select id="grupo" required>
                        <option value="">Seleccione el grupo</option>
                    </select>
                </div>

                <div class="form-group">
                    <label for="supervisor">Supervisor:</label>
                    <select id="supervisor" required>
                        <option value="">Seleccione el supervisor</option>
                    </select>
                </div>
            </div>

            <!-- Descripción -->
            <div class="section-title">
                <i class="fas fa-file-alt"></i>
                <span>Descripción de la Práctica</span>
            </div>

            <div class="form-group">
                <label for="descripcion">Descripción:</label>
                <textarea id="descripcion" 
                         placeholder="Ingrese la descripción detallada de la práctica"
                         required></textarea>
                <div class="help-text">Incluya objetivos y requerimientos específicos</div>
            </div>

            <div class="button-container">
                <button type="submit" class="button button-primary">
                    <i class="fas fa-save"></i> Guardar Práctica
                </button>
                <a href="/P" class="button button-secondary">
                    <i class="fas fa-arrow-left"></i> Volver al Perfil
                </a>
            </div>
        </form>

        <div id="confirmationMessage" class="confirmation">
            <strong><i class="fas fa-check-circle"></i> Práctica asignada exitosamente:</strong>
            <ul id="confirmationDetails"></ul>
        </div>

        <div class="historial">
            <h3>
                <i class="fas fa-history"></i>
                Historial de prácticas asignadas
            </h3>
            <ul id="historialList"></ul>
        </div>
    </div>

    <script>
let especialidadActual = null;
let esMaestro = false;

// Función para cargar materias
async function cargarMaterias() {
    try {
        const response = await fetch('/api/materias');
        const data = await response.json();
        
        if (data.success) {
            const select = document.getElementById('materia');
            select.innerHTML = '<option value="">Seleccione la materia</option>';
            
            data.materias.forEach(materia => {
                select.innerHTML += `
                    <option value="${materia.id}">${materia.codigo} - ${materia.nombre}</option>
                `;
            });
        }
    } catch (error) {
        console.error('Error al cargar materias:', error);
        mostrarError('Error al cargar las materias disponibles');
    }
}

// Función para cargar tipos de práctica
async function cargarTiposPractica(materiaId) {
    try {
        const response = await fetch(`/api/materias/${materiaId}/tipos-practica`);
        const data = await response.json();
        
        const select = document.getElementById('tipoPractica');
        select.innerHTML = '<option value="">Seleccione tipo de práctica</option>';
        
        if (data.success) {
            data.tipos.forEach(tipo => {
                select.innerHTML += `
                    <option value="${tipo.id}">${tipo.nombre}</option>
                `;
            });
        }
    } catch (error) {
        console.error('Error al cargar tipos de práctica:', error);
        mostrarError('Error al cargar los tipos de práctica');
    }
}

// Función para cargar grupos
async function cargarGrupos() {
    try {
        const response = await fetch('/api/grupos');
        const data = await response.json();
        
        if (data.success) {
            const select = document.getElementById('grupo');
            select.innerHTML = '<option value="">Seleccione el grupo</option>';
            
            data.grupos.forEach(grupo => {
                select.innerHTML += `
                    <option value="${grupo.id}">${grupo.nombre}</option>
                `;
            });
        }
    } catch (error) {
        console.error('Error al cargar grupos:', error);
        mostrarError('Error al cargar los grupos disponibles');
    }
}

// Función para cargar supervisores
async function cargarSupervisores() {
    try {
        const response = await fetch('/api/supervisores');
        const data = await response.json();
        
        if (data.success) {
            const select = document.getElementById('supervisor');
            select.innerHTML = '<option value="">Seleccione el supervisor</option>';
            
            data.supervisores.forEach(supervisor => {
                select.innerHTML += `
                    <option value="${supervisor.id}">${supervisor.nombre_completo} - ${supervisor.especialidad}</option>
                `;
            });
        }
    } catch (error) {
        console.error('Error al cargar supervisores:', error);
        mostrarError('Error al cargar los supervisores disponibles');
    }
}

// Inicialización cuando se carga el documento
document.addEventListener('DOMContentLoaded', async function() {
    try {
        const userData = JSON.parse(sessionStorage.getItem('userData'));
        if (!userData) {
            window.location.href = '/';
            return;
        }

        esMaestro = userData.rol_id === 1;
        console.log('Es maestro:', esMaestro);

        if (!esMaestro) {
            mostrarError('Acceso no autorizado. Esta página es solo para maestros.');
            setTimeout(() => {
                window.location.href = '/P';
            }, 3000);
            return;
        }

        // Configurar fechas mínimas y máximas
        configurarFechas();

        // Cargar datos iniciales
        await Promise.all([
            cargarMaterias(),
            cargarGrupos(),
            cargarSupervisores(),
            mostrarEspecialidadMaestro(userData.id)
        ]);

        // Configurar event listeners
        setupEventListeners();

        // Cargar historial
        await cargarHistorial();

    } catch (error) {
        console.error('Error al inicializar:', error);
        mostrarError('Error al cargar los datos iniciales');
    }
});

// Función para configurar fechas
function configurarFechas() {
    const today = new Date().toISOString().split('T')[0];
    const maxDate = new Date();
    maxDate.setFullYear(maxDate.getFullYear() + 1);
    const maxDateStr = maxDate.toISOString().split('T')[0];

    const fechaInicio = document.getElementById('fechaInicio');
    const fechaFin = document.getElementById('fechaFin');

    fechaInicio.min = today;
    fechaInicio.max = maxDateStr;
    fechaFin.min = today;
    fechaFin.max = maxDateStr;

    fechaInicio.addEventListener('change', validarFechas);
    fechaFin.addEventListener('change', validarFechas);
}

// Función para mostrar especialidad del maestro
async function mostrarEspecialidadMaestro(userId) {
    try {
        const response = await fetch(`/getUserData/${userId}`);
        const data = await response.json();

        if (data.success && data.userData.especialidad_nombre) {
            especialidadActual = data.userData.especialidad_id;
            const especialidadInfo = document.createElement('div');
            especialidadInfo.classList.add('especialidad-info');
            especialidadInfo.innerHTML = `
                <i class="fas fa-user-md"></i>
                Especialidad: ${data.userData.especialidad_nombre}
            `;
            document.querySelector('.header').appendChild(especialidadInfo);
        }
    } catch (error) {
        console.error('Error al cargar especialidad:', error);
    }
}

// Función para validar fechas
function validarFechas() {
    const fechaInicio = new Date(document.getElementById('fechaInicio').value);
    const fechaFin = new Date(document.getElementById('fechaFin').value);
    const btnSubmit = document.querySelector('button[type="submit"]');
    const mensajeError = document.getElementById('mensajeFechas');

    if (fechaInicio && fechaFin) {
        if (fechaFin < fechaInicio) {
            mensajeError.textContent = 'La fecha de fin no puede ser anterior a la fecha de inicio';
            mensajeError.style.display = 'block';
            btnSubmit.disabled = true;
        } else {
            mensajeError.style.display = 'none';
            btnSubmit.disabled = false;
        }
    }
}

// Función para guardar práctica
async function guardarPractica(event) {
    event.preventDefault();
    const form = document.getElementById('practicaForm');
    const submitBtn = form.querySelector('button[type="submit"]');
    
    submitBtn.disabled = true;
    submitBtn.classList.add('loading');

    try {
        const userData = JSON.parse(sessionStorage.getItem('userData'));
        if (!userData) throw new Error('Sesión no válida');

        const formData = {
            tipo_practica_id: document.getElementById('tipoPractica').value,
            grupo_id: document.getElementById('grupo').value,
            maestro_id: document.getElementById('supervisor').value || userData.id,
            fecha_asignacion: document.getElementById('fechaInicio').value,
            fecha_limite: document.getElementById('fechaFin').value,
            descripcion: document.getElementById('descripcion').value
        };

        // Validar campos requeridos
        for (const [key, value] of Object.entries(formData)) {
            if (!value) {
                throw new Error(`Por favor complete todos los campos requeridos`);
            }
        }

        const response = await fetch('/api/practicas/asignar', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(formData)
        });

        const data = await response.json();

        if (data.success) {
            mostrarConfirmacion(data.practica);
            form.reset();
            await cargarHistorial();
        } else {
            throw new Error(data.error || 'Error al asignar la práctica');
        }
    } catch (error) {
        console.error('Error:', error);
        mostrarError(error.message);
    } finally {
        submitBtn.disabled = false;
        submitBtn.classList.remove('loading');
    }
}


// Función para mostrar error
function mostrarError(mensaje) {
    const errorDiv = document.getElementById('errorMessage');
    errorDiv.textContent = mensaje;
    errorDiv.style.display = 'block';
    errorDiv.scrollIntoView({ behavior: 'smooth', block: 'start' });

    setTimeout(() => {
        errorDiv.style.display = 'none';
    }, 5000);
}

// Función para mostrar confirmación
function mostrarConfirmacion(practica) {
    const confirmacionDiv = document.getElementById('confirmationMessage');
    const detallesUl = document.getElementById('confirmationDetails');
    
    const fechaInicio = new Date(practica.fecha_asignacion).toLocaleDateString('es-ES');
    const fechaFin = new Date(practica.fecha_limite).toLocaleDateString('es-ES');

    detallesUl.innerHTML = `
        <li><i class="fas fa-book"></i> <strong>Materia:</strong> ${practica.materia_nombre}</li>
        <li><i class="fas fa-tasks"></i> <strong>Tipo:</strong> ${practica.tipo_nombre}</li>
        <li><i class="fas fa-calendar"></i> <strong>Período:</strong> ${fechaInicio} - ${fechaFin}</li>
        <li><i class="fas fa-users"></i> <strong>Grupo:</strong> ${practica.grupo_nombre}</li>
        <li><i class="fas fa-user-tie"></i> <strong>Supervisor:</strong> ${practica.maestro_nombre}</li>
        <li><i class="fas fa-file-alt"></i> <strong>Descripción:</strong> ${practica.descripcion}</li>
    `;
    
    confirmacionDiv.style.display = 'block';
    confirmacionDiv.scrollIntoView({ behavior: 'smooth', block: 'start' });
}

// Función para cargar historial
async function cargarHistorial() {
    try {
        const userData = JSON.parse(sessionStorage.getItem('userData'));
        if (!userData) return;

        const response = await fetch(`/api/practicas/maestro/${userData.id}`);
        const data = await response.json();

        const historialList = document.getElementById('historialList');
        historialList.innerHTML = '';

        if (!data.practicas || data.practicas.length === 0) {
            historialList.innerHTML = `
                <div class="practica-item">
                    <p style="text-align: center; color: #666;">
                        <i class="fas fa-info-circle"></i> 
                        No hay prácticas registradas
                    </p>
                </div>`;
            return;
        }

        data.practicas.forEach(practica => {
            const fechaAsignacion = new Date(practica.fecha_asignacion).toLocaleDateString('es-ES');
            historialList.innerHTML += `
                <div class="practica-item">
                    <div class="practica-header">
                        <span class="practica-codigo">
                            <i class="fas fa-hashtag"></i> ${practica.codigo}
                        </span>
                        <span class="practica-fecha">
                            <i class="fas fa-calendar"></i> ${fechaAsignacion}
                        </span>
                    </div>
                    <div class="practica-detalles">
                        <span class="practica-tipo">
                            <i class="fas fa-book"></i> ${practica.materia_nombre} - ${practica.tipo_nombre}
                        </span>
                        <span class="practica-grupo">
                            <i class="fas fa-users"></i> ${practica.grupo_nombre}
                        </span>
                        <span class="estado-badge" style="background-color: ${practica.estado_color}">
                            <i class="fas fa-circle"></i> ${practica.estado_nombre}
                        </span>
                    </div>
                </div>
            `;
        });
    } catch (error) {
        console.error('Error:', error);
        mostrarError('Error al cargar el historial de prácticas');
    }
}

// Función para configurar event listeners
function setupEventListeners() {
    document.querySelectorAll('input, select, textarea').forEach(element => {
        element.addEventListener('input', () => {
            document.getElementById('errorMessage').style.display = 'none';
            document.getElementById('mensajeFechas').style.display = 'none';
        });
    });

    document.getElementById('materia').addEventListener('change', function() {
        if (this.value) {
            cargarTiposPractica(this.value);
        } else {
            document.getElementById('tipoPractica').innerHTML = '<option value="">Seleccione tipo de práctica</option>';
        }
    });

    document.getElementById('practicaForm').addEventListener('submit', guardarPractica);
}
    </script>
</body>
</html>