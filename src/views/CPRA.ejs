<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #3498db;
            --primary-dark: #2980b9;
            --error-color: #e74c3c;
            --success-color: #2ecc71;
            --warning-color: #f1c40f;
            --background-color: #f5f5f5;
            --text-color: #2c3e50;
            --border-color: #ddd;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: var(--background-color);
            min-height: 100vh;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            padding: 30px;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }

        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
            padding-bottom: 15px;
            border-bottom: 2px solid var(--border-color);
        }

        .header-left {
            display: flex;
            flex-direction: column;
            gap: 5px;
        }

        .header-title {
            font-size: 24px;
            font-weight: 700;
            color: var(--text-color);
        }

        .user-info {
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .user-badge {
            background-color: var(--primary-color);
            color: white;
            padding: 6px 12px;
            border-radius: 6px;
            font-size: 14px;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 6px;
        }

        /* Tarjetas de resumen */
        .summary-cards {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .summary-card {
            background: white;
            padding: 20px;
            border-radius: 10px;
            border: 1px solid var(--border-color);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .summary-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }

        .summary-card h3 {
            font-size: 14px;
            color: var(--text-color);
            margin: 0 0 10px 0;
            opacity: 0.8;
        }

        .summary-card .value {
            font-size: 24px;
            font-weight: 700;
            color: var(--primary-color);
        }

        /* Filtros */
        .filters-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 16px;
            margin-bottom: 24px;
            background: #f8f9fa;
            padding: 20px;
            border-radius: 10px;
        }

        .filter-group {
            display: flex;
            flex-direction: column;
            gap: 6px;
        }

        .filter-label {
            font-size: 14px;
            font-weight: 500;
            color: var(--text-color);
        }

        .filter-select {
            padding: 10px;
            border: 1px solid var(--border-color);
            border-radius: 6px;
            font-size: 14px;
            color: var(--text-color);
            background-color: white;
            transition: all 0.3s ease;
        }

        .filter-select:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 2px rgba(52, 152, 219, 0.2);
        }

        /* Tabla de citas */
        .appointments-container {
            background: white;
            border-radius: 10px;
            overflow: hidden;
            border: 1px solid var(--border-color);
        }

        .appointments-table {
            width: 100%;
            border-collapse: collapse;
        }

        .appointments-table th {
            background-color: #f8f9fa;
            padding: 12px 16px;
            text-align: left;
            font-size: 13px;
            font-weight: 600;
            color: var(--text-color);
            text-transform: uppercase;
            letter-spacing: 0.5px;
            border-bottom: 2px solid var(--border-color);
        }

        .appointments-table td {
            padding: 16px;
            border-bottom: 1px solid var(--border-color);
            font-size: 14px;
            color: var(--text-color);
        }

        .appointments-table tr:hover {
            background-color: #f8f9fa;
        }

        /* Estado badges */
        .status-badge {
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 500;
            display: inline-flex;
            align-items: center;
            gap: 6px;
        }

        .status-pendiente {
            background-color: #fef3c7;
            color: #92400e;
        }

        .status-completada {
            background-color: #d1fae5;
            color: #065f46;
        }

        .status-cancelada {
            background-color: #fee2e2;
            color: #991b1b;
        }

        /* Botones */
        .button-container {
            display: flex;
            gap: 8px;
        }

        .btn {
            padding: 8px 16px;
            border-radius: 6px;
            font-size: 13px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            border: none;
            display: inline-flex;
            align-items: center;
            gap: 6px;
        }

        .btn-primary {
            background-color: var(--primary-color);
            color: white;
        }

        .btn-primary:hover {
            background-color: var(--primary-dark);
        }

        .btn-success {
            background-color: var(--success-color);
            color: white;
        }

        .btn-danger {
            background-color: var(--error-color);
            color: white;
        }

        .back-button-container {
            display: flex;
            justify-content: center;
            margin-top: 30px;
        }

        .back-button {
            background-color: #95a5a6;
            color: white;
            padding: 12px 24px;
            border: none;
            border-radius: 6px;
            font-size: 16px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 8px;
            width: 100%;
            max-width: 200px;
            justify-content: center;
        }

        .back-button:hover {
            background-color: #7f8c8d;
            transform: translateY(-1px);
        }

        /* Modales */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
            align-items: center;
            justify-content: center;
            z-index: 1000;
        }

        .modal-content {
    background: white;
    border-radius: 12px;
    padding: 24px;
    width: 90%;
    max-width: 500px;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
}

.modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
    padding-bottom: 15px;
    border-bottom: 2px solid var(--border-color);
}

.modal-title {
    font-size: 20px;
    font-weight: 600;
    color: var(--text-color);
    display: flex;
    align-items: center;
    gap: 10px;
}

.modal-title i {
    color: var(--primary-color);
}

.modal-body {
    margin-bottom: 24px;
}

.modal-body label {
    display: block;
    margin-bottom: 8px;
    color: var(--text-color);
    font-weight: 500;
    font-size: 14px;
}

.modal-body textarea {
    width: 100%;
    min-height: 120px;
    padding: 12px;
    border: 1px solid var(--border-color);
    border-radius: 8px;
    font-size: 14px;
    resize: vertical;
    margin-bottom: 20px;
    font-family: inherit;
    transition: all 0.3s ease;
}

.modal-body textarea:focus {
    outline: none;
    border-color: var(--primary-color);
    box-shadow: 0 0 0 2px rgba(52, 152, 219, 0.1);
}

.modal-footer {
    display: flex;
    justify-content: flex-end;
    gap: 12px;
}
        .close-button {
            background: none;
            border: none;
            font-size: 24px;
            color: #666;
            cursor: pointer;
            transition: color 0.3s ease;
        }

        .close-button:hover {
            color: var(--error-color);
        }

        .modal-body {
            margin-bottom: 24px;
        }

        .detail-group {
            margin-bottom: 16px;
        }

        .detail-label {
            font-size: 13px;
            color: #666;
            margin-bottom: 4px;
        }

        .detail-value {
            font-size: 15px;
            color: var(--text-color);
            font-weight: 500;
        }

        /* Notificaciones */
        .notification {
            position: fixed;
            bottom: 20px;
            right: 20px;
            padding: 12px 24px;
            border-radius: 6px;
            font-weight: 500;
            color: white;
            display: none;
            animation: slideIn 0.3s ease-out;
            z-index: 1100;
        }

        @keyframes slideIn {
            from { transform: translateX(100%); }
            to { transform: translateX(0); }
        }

        /* Responsive */
        @media (max-width: 768px) {
            .container {
                padding: 20px;
            }

            .summary-cards {
                grid-template-columns: 1fr;
            }

            .filters-container {
                grid-template-columns: 1fr;
            }

            .appointments-table {
                display: block;
                overflow-x: auto;
            }
        }
        .btn-modal {
    padding: 10px 20px;
    border-radius: 8px;
    font-size: 14px;
    font-weight: 500;
    border: none;
    cursor: pointer;
    transition: all 0.3s ease;
    display: inline-flex;
    align-items: center;
    gap: 8px;
}

.btn-modal-confirm {
    background-color: var(--success-color);
    color: white;
}

.btn-modal-confirm:hover {
    background-color: #27ae60;
    transform: translateY(-1px);
}

.btn-modal-cancel {
    background-color: var(--error-color);
    color: white;
}

.btn-modal-cancel:hover {
    background-color: #c0392b;
    transform: translateY(-1px);
}

.btn-modal-secondary {
    background-color: #95a5a6;
    color: white;
}

.btn-modal-secondary:hover {
    background-color: #7f8c8d;
    transform: translateY(-1px);
}
.modal {
    background-color: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(3px);
}

/* Animaciones */
@keyframes modalSlideIn {
    from {
        transform: translateY(-20px);
        opacity: 0;
    }
    to {
        transform: translateY(0);
        opacity: 1;
    }
}

.modal-content {
    animation: modalSlideIn 0.3s ease;
}

/* Estilo para mensaje de validación */
.validation-message {
    color: var(--error-color);
    font-size: 12px;
    margin-top: -15px;
    margin-bottom: 15px;
}

/* Botón cerrar */
.close-button {
    background: none;
    border: none;
    font-size: 20px;
    color: #666;
    cursor: pointer;
    padding: 5px;
    transition: color 0.3s ease;
}

.close-button:hover {
    color: var(--error-color);
}
    </style>
</head>
<body>
    <div class="container">
        <!-- Header -->
        <div class="header">
            <div class="header-left">
                <h1 class="header-title">Citas Asignadas</h1>
                <div class="user-info">
                    <span class="user-badge">
                        <i class="fas fa-user-graduate"></i>
                        Practicante
                    </span>
                    <span id="practicanteName" class="text-gray-700"></span>
                </div>
            </div>
        </div>

        <!-- Tarjetas de resumen -->
        <div class="summary-cards">
            <div class="summary-card">
                <h3>Citas Pendientes</h3>
                <div class="value" id="citasPendientes">0</div>
            </div>
            <div class="summary-card">
                <h3>Citas Completadas</h3>
                <div class="value" id="citasCompletadas">0</div>
            </div>
            <div class="summary-card">
                <h3>Próxima Cita</h3>
                <div class="value" id="proximaCita">-</div>
            </div>
            <div class="summary-card">
                <h3>Satisfacción Pacientes</h3>
                <div class="value" id="satisfaccionPromedio">-</div>
            </div>
        </div>

        <!-- Filtros -->
        <div class="filters-container">
            <div class="filter-group">
                <label class="filter-label">Filtrar por Práctica</label>
                <select class="filter-select" id="practiceFilter">
                    <option value="">Todas las prácticas</option>
                </select>
            </div>
            
            <div class="filter-group">
                <label class="filter-label">Filtrar por Estado</label>
                <select class="filter-select" id="statusFilter">
                    <option value="">Todos los estados</option>
                    <option value="pendiente">Pendiente</option>
                    <option value="completada">Completada</option>
                    <option value="cancelada">Cancelada</option>
                </select>
            </div>
            
            <div class="filter-group">
                <label class="filter-label">Filtrar por Fecha</label>
                <select class="filter-select" id="dateFilter">
                    <option value="">Todas las fechas</option>
                    <option value="today">Hoy</option>
                    <option value="week">Esta semana</option>
                    <option value="month">Este mes</option>
                </select>
            </div>
        </div>

        <!-- Tabla de Citas -->
        <div class="appointments-container">
            <table class="appointments-table">
                <thead>
                    <tr>
                        <th>ID Cita</th>
                        <th>Fecha y Hora</th>
                        <th>Paciente</th>
                        <th>Práctica</th>
                        <th>Estado</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody id="appointmentsTableBody">
                    <!-- Se llena dinámicamente -->
                </tbody>
            </table>
        </div>

        <!-- Botón Volver -->
        <div class="back-button-container">
            <button class="back-button" onclick="window.location.href='/P'">
                <i class="fas fa-arrow-left"></i>
                Volver al Perfil
            </button>
        </div>
    </div>

    <!-- Modal Detalles -->
    <div id="detailsModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title">Detalles de la Cita</h2>
                <button onclick="closeModal('detailsModal')" class="close-button">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="modal-body">
                <div id="appointmentDetails">
                    <!-- Se llena dinámicamente -->
                </div>
            </div>
        </div>
    </div>

    <!-- Modal Completar Cita -->
    <div id="completeModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title">
                    <i class="fas fa-check-circle"></i>
                    Completar Cita
                </h2>
                <button onclick="closeModal('completeModal')" class="close-button">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="modal-body">
                <form id="completeForm">
                    <label class="form-label">Notas del procedimiento:</label>
                    <textarea id="procedureNotes" 
                             placeholder="Describa el procedimiento realizado y cualquier observación relevante"></textarea>
                    <div class="modal-footer">
                        <button type="button" class="btn-modal btn-modal-secondary" onclick="closeModal('completeModal')">
                            <i class="fas fa-times"></i> Cancelar
                        </button>
                        <button type="submit" class="btn-modal btn-modal-confirm">
                            <i class="fas fa-check"></i> Confirmar
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    <!-- Modal Confirmación Cancelar -->
    <div id="cancelModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title">
                    <i class="fas fa-exclamation-triangle"></i>
                    Cancelar Cita
                </h2>
                <button onclick="closeModal('cancelModal')" class="close-button">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="modal-body">
                <form id="cancelForm">
                    <label class="form-label">Motivo de cancelación:</label>
                    <textarea id="cancelReason" required
                             placeholder="Por favor, indique el motivo por el cual desea cancelar la cita"></textarea>
                    <div class="modal-footer">
                        <button type="button" class="btn-modal btn-modal-secondary" onclick="closeModal('cancelModal')">
                            <i class="fas fa-arrow-left"></i> Volver
                        </button>
                        <button type="submit" class="btn-modal btn-modal-cancel">
                            <i class="fas fa-times"></i> Confirmar Cancelación
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Notificación -->
    <div id="notification" class="notification"></div>

    <script>
        let currentCitas = [];
        let userData = null;

        document.addEventListener('DOMContentLoaded', async function() {
    try {
        // Verificar sesión
        userData = JSON.parse(sessionStorage.getItem('userData'));
        if (!userData) {
            window.location.href = '/';
            return;
        }

        // Verificar rol de practicante
        if (userData.rol_id !== 2) {
            showNotification('Acceso no autorizado. Esta página es solo para practicantes.', 'error');
            setTimeout(() => {
                window.location.href = '/P';
            }, 3000);
            return;
        }

        currentUser = userData;

        // Mostrar nombre del practicante
        document.getElementById('practicanteName').textContent = 
            `${userData.nombre} ${userData.apellido}`;

        // Cargar datos
        await loadAppointments();
        setupEventListeners();

    } catch (error) {
        console.error('Error en la inicialización:', error);
        showNotification('Error al inicializar la aplicación', 'error');
    }
});

        async function loadAppointments() {
    try {
        console.log('Cargando citas para usuario:', currentUser.id);
        const response = await fetch(`/api/citas/practicante/${currentUser.id}`, {
            headers: {
                'Accept': 'application/json'
            }
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        console.log('Datos de citas recibidos:', data);

        if (data.success) {
            currentCitas = data.citas || [];
            updateAppointmentsTable();
            if (data.resumen) {
                updateSummaryCards(data.resumen);
            }
        } else {
            throw new Error(data.error || 'Error al cargar las citas');
        }
    } catch (error) {
        console.error('Error específico al cargar citas:', error);
        showNotification('No se pudieron cargar las citas. Por favor, recarga la página.', 'error');

        // Limpiar la tabla y mostrar mensaje de error
        const tbody = document.getElementById('appointmentsTableBody');
        if (tbody) {
            tbody.innerHTML = `
                <tr>
                    <td colspan="6" class="text-center">
                        <i class="fas fa-exclamation-circle"></i>
                        Error al cargar las citas. Por favor, recarga la página.
                    </td>
                </tr>
            `;
        }
    }
}

        function updateSummaryCards(resumen) {
            document.getElementById('citasPendientes').textContent = resumen.pendientes || 0;
            document.getElementById('citasCompletadas').textContent = resumen.completadas || 0;
            
            // Formatear próxima cita
            const proximaCita = resumen.proxima_cita ? 
                new Date(resumen.proxima_cita).toLocaleDateString('es-ES', {
                    day: 'numeric',
                    month: 'short'
                }) : '-';
            document.getElementById('proximaCita').textContent = proximaCita;

            // Formatear satisfacción
            const satisfaccion = resumen.satisfaccion_promedio ? 
                `${resumen.satisfaccion_promedio.toFixed(1)}★` : '-';
            document.getElementById('satisfaccionPromedio').textContent = satisfaccion;
        }

        function updateFilters() {
            // Filtro de prácticas
            const practicas = [...new Set(currentCitas.map(cita => cita.practica_nombre))];
            const practiceFilter = document.getElementById('practiceFilter');
            practiceFilter.innerHTML = '<option value="">Todas las prácticas</option>' +
                practicas.map(practica => `
                    <option value="${practica}">${practica}</option>
                `).join('');
        }

        function filterAppointments() {
            const practiceFilter = document.getElementById('practiceFilter').value;
            const statusFilter = document.getElementById('statusFilter').value;
            const dateFilter = document.getElementById('dateFilter').value;

            let filteredCitas = currentCitas;

            // Filtrar por práctica
            if (practiceFilter) {
                filteredCitas = filteredCitas.filter(cita => 
                    cita.practica_nombre === practiceFilter
                );
            }

            // Filtrar por estado
            if (statusFilter) {
                filteredCitas = filteredCitas.filter(cita => 
                    cita.estado_nombre.toLowerCase() === statusFilter
                );
            }

            // Filtrar por fecha
            if (dateFilter) {
                const today = new Date();
                today.setHours(0, 0, 0, 0);
                
                filteredCitas = filteredCitas.filter(cita => {
                    const citaDate = new Date(cita.fecha_hora);
                    citaDate.setHours(0, 0, 0, 0);

                    switch (dateFilter) {
                        case 'today':
                            return citaDate.getTime() === today.getTime();
                        case 'week':
                            const weekStart = new Date(today);
                            weekStart.setDate(today.getDate() - today.getDay());
                            return citaDate >= weekStart && citaDate <= today;
                        case 'month':
                            return citaDate.getMonth() === today.getMonth() && 
                                   citaDate.getFullYear() === today.getFullYear();
                        default:
                            return true;
                    }
                });
            }

            updateAppointmentsTable(filteredCitas);
        }

        function updateAppointmentsTable(citas = currentCitas) {
    const tbody = document.getElementById('appointmentsTableBody');
    
    if (!citas.length) {
        tbody.innerHTML = `
            <tr>
                <td colspan="6" class="text-center py-4 text-gray-500">
                    No hay citas que coincidan con los filtros seleccionados
                </td>
            </tr>
        `;
        return;
    }

    tbody.innerHTML = citas.map(cita => `
        <tr>
            <td>${cita.codigo || '-'}</td>
            <td>${formatDateTime(cita.fecha_hora)}</td>
            <td>${cita.paciente_nombre}</td>
            <td>${cita.tipo_practica} - ${cita.materia_nombre}</td>
            <td>
                <span class="status-badge status-${cita.estado_nombre.toLowerCase()}">
                    <i class="fas ${getStatusIcon(cita.estado_nombre)}"></i>
                    ${cita.estado_nombre}
                </span>
            </td>
            <td>
                <div class="button-container">
                    <button class="btn btn-primary" onclick="showDetails(${cita.id})">
                        <i class="fas fa-eye"></i> Ver
                    </button>
                    ${cita.estado_nombre === 'Pendiente' ? `
                        <button class="btn btn-success" onclick="showCompleteModal(${cita.id})">
                            <i class="fas fa-check"></i> Completar
                        </button>
                        <button class="btn btn-danger" onclick="showCancelModal(${cita.id})">
                            <i class="fas fa-times"></i> Cancelar
                        </button>
                    ` : ''}
                </div>
            </td>
        </tr>
    `).join('');
}
        function showDetails(citaId) {
            const cita = currentCitas.find(c => c.id === citaId);
            if (!cita) return;

            const detailsDiv = document.getElementById('appointmentDetails');
            detailsDiv.innerHTML = `
                <div class="detail-group">
                    <div class="detail-label">Paciente</div>
                    <div class="detail-value">${cita.paciente_nombre}</div>
                </div>
                <div class="detail-group">
                    <div class="detail-label">Práctica</div>
                    <div class="detail-value">${cita.practica_nombre}</div>
                </div>
                <div class="detail-group">
                    <div class="detail-label">Fecha y Hora</div>
                    <div class="detail-value">${formatDateTime(cita.fecha_hora)}</div>
                </div>
                <div class="detail-group">
                    <div class="detail-label">Estado</div>
                    <div class="detail-value">
                        <span class="status-badge status-${cita.estado_nombre.toLowerCase()}">
                            <i class="fas ${getStatusIcon(cita.estado_nombre)}"></i>
                            ${cita.estado_nombre}
                        </span>
                    </div>
                </div>
                ${cita.notas ? `
                    <div class="detail-group">
                        <div class="detail-label">Notas</div>
                        <div class="detail-value">${cita.notas}</div>
                    </div>
                ` : ''}
                ${cita.calificacion ? `
                    <div class="detail-group">
                        <div class="detail-label">Calificación del Paciente</div>
                        <div class="detail-value">
                            ${generateStars(cita.calificacion)}
                            ${cita.comentario_paciente ? `
                                <p class="mt-2 text-gray-600">${cita.comentario_paciente}</p>
                            ` : ''}
                        </div>
                    </div>
                ` : ''}
            `;

            showModal('detailsModal');
        }

        let selectedCitaId = null;

        function showCompleteModal(citaId) {
            selectedCitaId = citaId;
            document.getElementById('procedureNotes').value = '';
            showModal('completeModal');
        }

        function showCancelModal(citaId) {
            selectedCitaId = citaId;
            document.getElementById('cancelReason').value = '';
            showModal('cancelModal');
        }

        async function completarCita(e) {
    e.preventDefault();
    if (!selectedCitaId) return;

    try {
        const notas = document.getElementById('procedureNotes').value;
        const response = await fetch(`/api/citas/${selectedCitaId}/completar`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify({ notas })
        });

        const data = await response.json();
        
        if (data.success) {
            showNotification('Cita completada exitosamente', 'success');
            closeModal('completeModal');
            await loadAppointments(); // Recargar las citas
        } else {
            throw new Error(data.error || 'Error al completar la cita');
        }
    } catch (error) {
        console.error('Error:', error);
        showNotification(error.message || 'Error al completar la cita', 'error');
    }
}

async function cancelarCita(e) {
    e.preventDefault();
    if (!selectedCitaId) return;

    try {
        const motivo = document.getElementById('cancelReason').value;
        const response = await fetch(`/api/citas/${selectedCitaId}/cancelar`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify({ motivo })
        });

        const data = await response.json();
        
        if (data.success) {
            showNotification('Cita cancelada exitosamente', 'success');
            closeModal('cancelModal');
            await loadAppointments(); // Recargar las citas
        } else {
            throw new Error(data.error || 'Error al cancelar la cita');
        }
    } catch (error) {
        console.error('Error:', error);
        showNotification(error.message || 'Error al cancelar la cita', 'error');
    }
}

// Función para mostrar los modales
function showCompleteModal(citaId) {
    selectedCitaId = citaId;
    document.getElementById('procedureNotes').value = '';
    showModal('completeModal');
}

function showCancelModal(citaId) {
    selectedCitaId = citaId;
    document.getElementById('cancelReason').value = '';
    showModal('cancelModal');
}

// Asegúrate de que los formularios tengan los event listeners correctos
document.addEventListener('DOMContentLoaded', function() {
    document.getElementById('completeForm').addEventListener('submit', completarCita);
    document.getElementById('cancelForm').addEventListener('submit', cancelarCita);
});

        function setupEventListeners() {
            // Filtros
            document.querySelectorAll('.filter-select').forEach(select => {
                select.addEventListener('change', filterAppointments);
            });

            // Formularios
            document.getElementById('completeForm').addEventListener('submit', completeCita);
            document.getElementById('cancelForm').addEventListener('submit', cancelCita);
        }

        // Utilidades
        function formatDateTime(dateTimeStr) {
            return new Date(dateTimeStr).toLocaleDateString('es-ES', {
                weekday: 'long',
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
        }

function getStatusIcon(status) {
    const icons = {
        'Pendiente': 'fa-clock',
        'Completada': 'fa-check-circle',
        'Cancelada': 'fa-times-circle',
        'En Proceso': 'fa-spinner'
    };
    return icons[status] || 'fa-circle';
}

function generateStars(rating) {
    const fullStar = '<i class="fas fa-star text-yellow-400"></i>';
    const emptyStar = '<i class="far fa-star text-gray-300"></i>';
    return Array(5).fill('').map((_, i) => i < rating ? fullStar : emptyStar).join('');
}

function showModal(modalId) {
    const modal = document.getElementById(modalId);
    if (!modal) return;
    
    modal.style.display = 'flex';
    // Añadir clase para animación
    modal.querySelector('.modal-content').classList.add('modal-appear');
    
    // Cerrar al hacer clic fuera del modal
    modal.addEventListener('click', function(e) {
        if (e.target === modal) {
            closeModal(modalId);
        }
    });
}

function closeModal(modalId) {
    const modal = document.getElementById(modalId);
    if (!modal) return;

    // Animación de salida
    const content = modal.querySelector('.modal-content');
    content.style.animation = 'modalSlideOut 0.3s ease';
    
    setTimeout(() => {
        modal.style.display = 'none';
        content.style.animation = '';
    }, 300);
}

function showNotification(message, type = 'success') {
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.innerHTML = `
        <i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-circle'}"></i>
        ${message}
    `;
    document.body.appendChild(notification);

    setTimeout(() => {
        notification.style.animation = 'fadeOut 0.5s ease forwards';
        setTimeout(() => notification.remove(), 500);
    }, 3000);
}

// Agregar keyframes para animaciones
const style = document.createElement('style');
style.textContent = `
    @keyframes modalSlideOut {
        from { transform: translateY(0); opacity: 1; }
        to { transform: translateY(20px); opacity: 0; }
    }

    @keyframes slideOut {
        from { transform: translateX(0); }
        to { transform: translateX(100%); }
    }

    .modal-appear {
        animation: modalSlideIn 0.3s ease;
    }

    @keyframes modalSlideIn {
        from { transform: translateY(20px); opacity: 0; }
        to { transform: translateY(0); opacity: 1; }
    }
`;
document.head.appendChild(style);

// Prevenir que el fondo se desplace cuando el modal está abierto
function toggleBodyScroll(disable) {
    document.body.style.overflow = disable ? 'hidden' : '';
}

// Manejar tecla Escape para cerrar modales
document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape') {
        const openModals = document.querySelectorAll('.modal[style*="display: flex"]');
        openModals.forEach(modal => {
            const modalId = modal.id;
            closeModal(modalId);
        });
    }
});

// Función para formatear fecha en español
function formatDate(date) {
    const options = {
        weekday: 'long',
        year: 'numeric',
        month: 'long',
        day: 'numeric'
    };
    return new Date(date).toLocaleDateString('es-ES', options);
}

// Función para formatear hora
function formatTime(date) {
    return new Date(date).toLocaleTimeString('es-ES', {
        hour: '2-digit',
        minute: '2-digit'
    });
}

// Inicializar tooltips
function initializeTooltips() {
    const buttons = document.querySelectorAll('[data-tooltip]');
    buttons.forEach(button => {
        button.addEventListener('mouseenter', e => {
            const tooltip = document.createElement('div');
            tooltip.className = 'tooltip';
            tooltip.textContent = e.target.dataset.tooltip;
            document.body.appendChild(tooltip);

            const rect = e.target.getBoundingClientRect();
            tooltip.style.top = `${rect.bottom + 10}px`;
            tooltip.style.left = `${rect.left + (rect.width / 2) - (tooltip.offsetWidth / 2)}px`;
        });

        button.addEventListener('mouseleave', () => {
            const tooltip = document.querySelector('.tooltip');
            if (tooltip) {
                tooltip.remove();
            }
        });
    });
}

// Cargar datos al iniciar y configurar actualizaciones periódicas
window.addEventListener('load', function() {
    loadAppointments();
    initializeTooltips();

    // Actualizar datos cada 5 minutos
    setInterval(loadAppointments, 300000);
});
</script>
</body>
</html>